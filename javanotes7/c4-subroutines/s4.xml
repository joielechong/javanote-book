<?xml version="1.0" encoding="UTF-8"?>


<section id="subroutines.4" title="Return Values">

<p><start><big>A</big> subroutine that returns a value</start> is called a
<newword>function</newword>. A given function can only return a value
of a specified type, called the <newword>return type</newword> of the
function. A function call generally occurs in a position where the computer is
expecting to find a value, such as the right side of an assignment statement,
as an actual parameter in a subroutine call, or in the middle of some larger
expression. A boolean-valued function can even be used as the test condition in
an <code>if</code>, <code>while</code>, <code>for</code> or <code>do..while</code> statement.</p>

<p>(It is also legal to use a function call as a stand-alone statement, just as
if it were a regular subroutine. In this case, the computer ignores the value
computed by the subroutine. Sometimes this makes sense. For example, the
function <code>TextIO.getln()</code>, with a return type of <classname>String</classname>, reads
and returns a line of input typed in by the user. Usually, the line that is
returned is assigned to a variable to be used later in the program, as in the
statement "<code>name&nbsp;=&nbsp;TextIO.getln();</code>". However, this function is also
useful as a subroutine call statement "<code>TextIO.getln();</code>", which still
reads all input up to and including the next carriage return.  Since the return value
is not assigned to a variable or used in an expression, it is simply discarded.
So, the effect of the subroutine call is to read <b>and discard</b> some input.
Sometimes, discarding unwanted input is exactly what you need to do.)</p>

<subsection id="subroutines.4.1" title="The return statement">
   
<p>You've already seen how functions such as <code>Math.sqrt()</code> and
<code>TextIO.getInt()</code> can be used. What you haven't seen is how to write
functions of your own. A function takes the same form as a regular subroutine,
except that you have to specify the value that is to be returned by the
subroutine. This is done with a <newword>return statement</newword>,
which has the following syntax:</p>

<pre>return  <bnf>expression</bnf> ;</pre>

<p>Such a <code>return</code> statement can only occur inside the definition of a
function, and the type of the <bnf>expression</bnf> must
match the return type that was specified for the function. (More exactly, it
must be legal to assign the expression to a variable whose type is specified by
the return type.) When the computer executes this <code>return</code> statement, it
evaluates the expression, terminates execution of the function, and uses the
value of the expression as the returned value of the function.</p>

<p>For example, consider the function definition</p>

<pre>static double pythagoras(double x, double y) {
      // Computes the length of the hypotenuse of a right
      // triangle, where the sides of the triangle are x and y.
    return  Math.sqrt( x*x + y*y );
}</pre>

<np>Suppose the computer executes the statement "<code>totalLength = 17 +
pythagoras(12,5);</code>". When it gets to the term <code>pythagoras(12,5)</code>, it
assigns the actual parameters <code>12</code> and <code>5</code> to the formal
parameters <code>x</code> and <code>y</code> in the function. In the body of the
function, it evaluates <code>Math.sqrt(12.0*12.0&nbsp;+&nbsp;5.0*5.0)</code>, which works out
to <code>13.0</code>. This value is "returned" by the function, so the <code>13.0</code> essentially
replaces the function call in the assignment statement, which then has the same effect
as the statement "<code>totalLength&nbsp;=&nbsp;17+<newcode>13.0</newcode></code>". 
The return value is added to <code>17</code>, and the result, 30.0, is stored in the variable,
<code>totalLength</code>.</np>
   
<p>Note that a <code>return</code> statement does not have to be the last
statement in the function definition.  At any point in the function where you
know the value that you want to return, you can return it.  Returning a value
will end the function immediately, skipping any subsequent statements in the
function.  However, it must be the case that the function definitely does
return some value, no matter what path the execution of the function takes
through the code.</p>

<p>You can use a <code>return</code> statement inside an ordinary subroutine,  one
with declared return type "<code>void</code>".  Since a void subroutine
does not return a value, the <code>return</code> statement does not include 
an expression; it simply takes the form "<code>return;</code>".  The effect
of this statement is to
terminate execution of the subroutine and return control back to the point in
the program from which the subroutine was called. This can be convenient if you
want to terminate execution somewhere in the middle of the subroutine, but
<code>return</code> statements are optional in non-function subroutines. In a
function, on the other hand, a return statement, with expression, is always
required.</p>

<p>Note that a <code>return</code> inside a loop will end the
loop as well as the subroutine that contains it.  Similarly, a <code>return</code>
in a <code>switch</code> statement breaks out of the <code>switch</code> statement as well as
the subroutine.  So, you will sometimes use <code>return</code> in contexts where
you are used to seeing a <code>break</code>.</p>

</subsection>
   
<subsection id="subroutines.4.2" title="Function Examples">

<p>Here is a very simple function that could be used in a program to compute
3N+1 sequences. (The 3N+1 sequence problem is one we've looked at several times
already, including in the <localref href="subroutines.3">previous section</localref>.)
Given one term in a 3N+1 sequence, this function computes the next
term of the sequence:</p>
 
<pre>static int nextN(int currentN) {
   if (currentN % 2 == 1)     // test if current N is odd
      return 3*currentN + 1;  // if so, return this value
   else
      return currentN / 2;    // if not, return this instead
}</pre>

<np>This function has two <code>return</code> statements.
Exactly one of the two <code>return</code> statements is executed to give the
value of the function.  Some people prefer to use a single <code>return</code>
statement at the very end of the function when possible. This allows the reader to find the
<code>return</code> statement easily. You might choose to write <code>nextN()</code>
like this, for example:</np>

<pre>static int nextN(int currentN) {
   int answer;  // answer will be the value returned
   if (currentN % 2 == 1)    // test if current N is odd
      answer = 3*currentN+1; // if so, this is the answer
   else
      answer = currentN / 2; // if not, this is the answer
   return answer;   // (Don't forget to return the answer!)
}</pre>

<p>Here is a subroutine that uses this <code>nextN</code> function. In this case,
the improvement from the version of the subroutine in <localref href="subroutines.3"/> is not
great, but if <code>nextN()</code> were a long function that performed a complex
computation, then it would make a lot of sense to hide that complexity inside a
function:</p>

<pre>static void print3NSequence(int startingValue) {
 
   int N;       // One of the terms in the sequence.
   int count;   // The number of terms found.
   
   N = startingValue;   // Start the sequence with startingValue.
   count = 1;
   
   System.out.println("The 3N+1 sequence starting from " + N);
   System.out.println();
   System.out.println(N);  // print initial term of sequence
 
   while (N &gt; 1) {
       <newcode>N = nextN( N );   // Compute next term, using the function nextN.</newcode>
       count++;          // Count this term.
       System.out.println(N);  // Print this term.
   }
   
   System.out.println();
   System.out.println("There were " + count + " terms in the sequence.");

}
</pre>
   
<break/>

<p>Here are a few more examples of functions. The first one computes a letter
grade corresponding to a given numerical grade, on a typical grading scale:</p>

<pre>/**
 * Returns the letter grade corresponding to the numerical
 * grade that is passed to this function as a parameter.
 */
static char letterGrade(int numGrade) {
   if (numGrade &gt;= 90)
      return 'A';   // 90 or above gets an A
   else if (numGrade &gt;= 80)
      return 'B';   // 80 to 89 gets a B
   else if (numGrade &gt;= 65)
      return 'C';   // 65 to 79 gets a C
   else if (numGrade &gt;= 50)
      return 'D';   // 50 to 64 gets a D
   else
      return 'F';   // anything else gets an F
   
}  // end of function letterGrade</pre>

<np>The type of the return value of <code>letterGrade()</code> is <ptype>char</ptype>.
Functions can return values of any type at all. Here's a function whose return
value is of type <ptype>boolean</ptype>. It demonstrates some interesting programming
points, so you should read the comments:</np>

<pre>/**
 * This function returns true if N is a prime number.  A prime number
 * is an integer greater than 1 that is not divisible by any positive 
 * integer, except itself and 1.  If N has any divisor, D, in the range 
 * 1 &lt; D &lt; N, then it has a divisor in the range 2 to Math.sqrt(N), namely
 * either D itself or N/D.  So we only test possible divisors from 2 to 
 * Math.sqrt(N).
 */
static boolean isPrime(int N) {
      
   int divisor;  // A number we will test to see whether it evenly divides N.
   
   if (N &lt;= 1)
      return false;  // No number &lt;= 1 is a prime.
   
   int maxToTry;  // The largest divisor that we need to test.

   maxToTry = (int)Math.sqrt(N);
        // We will try to divide N by numbers between 2 and maxToTry.
        // If N is not evenly divisible by any of these numbers, then 
        // N is prime.  (Note that since Math.sqrt(N) is defined to
        // return a value of type double, the value must be typecast 
        // to type int before it can be assigned to maxToTry.)
        
    for (divisor = 2; divisor &lt;= maxToTry; divisor++) {
        if ( N % divisor == 0 )  // Test if divisor evenly divides N.
           return false;         // If so, we know N is not prime.
                                 // No need to continue testing!
    }
    
    // If we get to this point, N must be prime.  Otherwise,
    // the function would already have been terminated by
    // a return statement in the previous loop.
    
    return true;  // Yes, N is prime.
 
}  // end of function isPrime</pre>

<p>Finally, here is a function with return type <classname>String</classname>. This function
has a <classname>String</classname> as parameter. The returned value is a reversed copy of
the parameter. For example, the reverse of "Hello World" is "dlroW olleH". The
algorithm for computing the reverse of a string, <code>str</code>, is to start with
an empty string and then to append each character from <code>str</code>, starting
from the last character of <code>str</code> and working backwards to the first:</p>

<pre>static String reverse(String str) {
   String copy;  // The reversed copy.
   int i;        // One of the positions in str, 
                 //       from str.length() - 1 down to 0.
   copy = "";    // Start with an empty string.
   for ( i = str.length() - 1;  i &gt;= 0;  i-- ) {
            // Append i-th char of str to copy.
      copy = copy + str.charAt(i);  
   }
   return copy;
}</pre>

<np>A <newword>palindrome</newword> is a string that reads the same
backwards and forwards, such as "radar". The <code>reverse()</code> function could
be used to check whether a string, <code>word</code>, is a palindrome by testing
"<code>if&nbsp;(word.equals(reverse(word)))</code>".</np>

<p>By the way, a typical beginner's error in writing functions is to print out
the answer, instead of returning it. <b>This represents a fundamental
misunderstanding.</b> The task of a function is to compute a value and return it to
the point in the program where the function was called. That's where the value
is used. Maybe it will be printed out. Maybe it will be assigned to a variable.
Maybe it will be used in an expression. But it's not for the function to
decide.</p>

</subsection>
<subsection id="subroutines.4.3" title="3N+1 Revisited">

<p>I'll finish this section with a complete new version of the 3N+1 program.
This will give me a chance to show the function <code>nextN()</code>, which was
defined above, used in a complete program. I'll also take the opportunity to
improve the program by getting it to print the terms of the sequence in
columns, with five terms on each line. This will make the output more
presentable. The idea is this: Keep track of how many terms have been printed
on the current line; when that number gets up to 5, start a new line of output.
To make the terms line up into neat columns, I use formatted output.</p>

<pre>/**
 * A program that computes and displays several 3N+1 sequences.  Starting
 * values for the sequences are input by the user.  Terms in the sequence 
 * are printed in columns, with five terms on each line of output.
 * After a sequence has been displayed, the number of terms in that 
 * sequence is reported to the user.
 */
public class ThreeN2 {
          
   
   public static void main(String[] args) {

      System.out.println("This program will print out 3N+1 sequences");
      System.out.println("for starting values that you specify.");
      System.out.println();
      
      int K;   // Starting point for sequence, specified by the user.
      do {
         System.out.println("Enter a starting value;");
         System.out.print("To end the program, enter 0: ");
         K = TextIO.getlnInt();  // get starting value from user
         if (K &gt; 0)              // print sequence, but only if K is &gt; 0
            print3NSequence(K);
      } while (K &gt; 0);           // continue only if K &gt; 0
 
   } // end main
 

   /**
    * print3NSequence prints a 3N+1 sequence to standard output, using
    * startingValue as the initial value of N.  It also prints the number 
    * of terms in the sequence. The value of the parameter, startingValue, 
    * must be a positive integer.
    */
   static void print3NSequence(int startingValue) {
  
      int N;       // One of the terms in the sequence.
      int count;   // The number of terms found.
      int onLine;  // The number of terms that have been output
                   //     so far on the current line.
      
      N = startingValue;   // Start the sequence with startingValue;
      count = 1;           // We have one term so far.
   
      System.out.println("The 3N+1 sequence starting from " + N);
      System.out.println();
      System.out.printf("%8d", N);  // Print initial term, using 8 characters.
      onLine = 1;        // There's now 1 term on current output line.
   
      while (N &gt; 1) {
          N = nextN(N);  // compute next term
          count++;   // count this term
          if (onLine == 5) {  // If current output line is full
             System.out.println();  // ...then output a carriage return
             onLine = 0;      // ...and note that there are no terms 
                              //               on the new line.
          }
          System.out.printf("%8d", N);  // Print this term in an 8-char column.
          onLine++;   // Add 1 to the number of terms on this line.
      }
   
      System.out.println();  // end current line of output
      System.out.println();  // and then add a blank line
      System.out.println("There were " + count + " terms in the sequence.");
   
   }  // end of print3NSequence
   
   
   /**
    * nextN computes and returns the next term in a 3N+1 sequence,
    * given that the current term is currentN.
    */
   static int nextN(int currentN) {
       if (currentN % 2 == 1)
          return 3 * currentN + 1;
       else
          return currentN / 2;
   }  // end of nextN()
   
   
} // end of class ThreeN2
</pre>

<np>You should read this program carefully and try to understand how it works.
</np>

</subsection>

</section>