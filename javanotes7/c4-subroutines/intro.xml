<?xml version="1.0" encoding="UTF-8"?>


<intro>

<p><start><big>O</big>ne way to break up a complex program</start> into
manageable pieces is to use <newword>subroutines</newword>. A
subroutine consists of the instructions for carrying out a certain task,
grouped together and given a name. Elsewhere in the program, that name can be
used as a stand-in for the whole set of instructions. As a computer executes a
program, whenever it encounters a subroutine name, it executes all the
instructions necessary to carry out the task associated with that
subroutine.</p>

<p>Subroutines can be used over and over, at different places in the program. A
subroutine can even be used inside another subroutine. This allows you to write
simple subroutines and then use them to help write more complex subroutines,
which can then be used in turn in other subroutines. In this way, very complex
programs can be built up step-by-step, where each step in the construction is
reasonably simple.</p>

<p>Subroutines in Java can be either static or non-static. This chapter 
covers static subroutines. Non-static subroutines, which are used in 
true object-oriented programming, will be covered in the next chapter.</p>

</intro>