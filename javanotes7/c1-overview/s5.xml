<?xml version="1.0" encoding="UTF-8"?>


<section id="overview.5" title="Objek dan Pemrograman Berbasis Objek" shorttitle="Pemrograman Berbasis Objek">

<p><start><big>P</big>rogram harus dirancang</start>. Tidak ada yang bisa dengan 
hanya duduk di depan komputer kemudian menghasilkan program yang rumit. Disiplin
ilmu yang disebut <newword>rekayasa perangkat lunak</newword> membahas konstruksi
dari program yang ditulis dengan baik, benar, dan dapat bekerja. Insinyur perangkat
lunak menggunakan metode yang terbukti dan terpercaya untuk menganalisa masalah
yang akan diselesaikan dan untuk merancang program yang digunakan untuk menyelesaikan
masalah tersebut.</p>

<p>Selama tahun 1970 hingga tahun 80an, metodologi utama dari rekayasa perangkat
lunak adalah <newword>pemrograman terstruktur</newword>. Pendekatan pemrograman
terstruktur dalam perancangan program didasarkan pada nasihat berikut ini:
untuk menyelesaikan sebuah masalah yang besar, terlebih dahulu pecahkan masalah
menjadi beberapa bagian lalu selesaikan bagian tersebut secara terpisah; untuk
menyelesaikan satu bagian, perlakukan bagian tersebut sebagai satu masalah baru
yang dapat dipecahkan menjadi masalah yang lebih kecil; akhirnya, kamu akan
akan menemukan masalah yang dapat diselesaikan langsung tanpa perlu memecahkannya
lagi. Pendekatan ini disebut <newword>pemrograman top-down</newword>.</p>

<p>Tidak ada yang salah dengan pendekatan pemrograman top-down. Pendekatan ini
sangat berguna dan sering digunakan untuk menyelesaikan masalah. Namun pendekatan
ini belum lengkap. Karena satu hal, yakni pendekatan ini hampir secara menyeluruh
berhubungan dengan menghasilkan <b>instruksi</b> yang berguna untuk menyelesaikan
masalah. Namun seiring berjalannya waktu, orang-orang menyadari bahwa perancangan
<b>struktur data</b> untuk program setidaknya sama pentingnya dengan perancangan
subrutin dan struktur kontrol. Pemrograman top-down tidak memberikan perhatian
yang cukup pada data yang sedang digunakan.</p>

<p>Masalah lain yang ada pada pemrograman top-down yang kaku yakni pendekatan 
ini memberikan kesulitan untuk mempergunakan kembali pekerjaan yang telah 
selesai di proyek lain. Dengan memulai dari masalah tertentu dan membaginya
menjadi bagian yang mudah dikerjakan, menyebabkan pemrograman top-down cenderung
menghasilkan rancangan yang khusus untuk masalah tersebut. Hampir tidak mungkin
untuk mengambil potongan besar pemrograman dari program lain dan memakainya
ke proyekmu tanpa melakukan modifikasi besar. Untuk menghasilkan program yang berkualitas
tinggi adalah susah dan mahal, jadi pemrogram dan orang yang mempekerjakan mereka
selalu berusaha menggunakan kembali pekerjaan yang lampau.</p>

<break/>

<p>Jadi di dalam prakteknya perancangan top-down sering kali dikombinasikan
dengan <newword>perancangan bottom-up</newword>. Pada perancangan bottom-up,
pendekatannya di mulai dari "bawah", dengan masalah yang telah kamu ketahui
cara penyelesaiannya (dan dimana kamu mungkin telah memiliki komponen perangkat
lunak yang dapat dipergunakan kembali). Dari sini, mau dapat memulai kerja
ke atas menuju solusi dari keseluruhan masalah.</p>

<p>Komponen yang dapat digunakan kembali sebaiknya dibuat se-"modular" mungkin.
Sebuah <newword>modul</newword> merupakan sebuah komponen dari sistem yang lebih
besar yang berinteraksi dengan sistem secara sederhana, didefinisikan dengan baik,
dan langsung. Tujuannya adalah agar modul dapat "dipasang" ke sistem. Rincian dari
hal yang terjadi di dalam modul tidaklah penting untuk sistem secara keseluruhan,
sepanjang modul tersebut memenuhi peran yang ditetapkan untuknya. Hal ini disebut
dengan <newword>penyembunyian informasi</newword>, ini merupakan salah satu prinsip
yang paling terpenting pada rekayasa perangkat lunak.</p>

<p>Salah satu format umum dari modul perangkat lunak yakni menyimpan beberapa data
bersamaan dengan subrutin untuk memanipulasi data tersebut. Sebagai contoh, sebuah
modul alamat pos dapat mengandung sebuah daftar dari nama dan alamat serta subrutin
untuk menambahkan nama baru, dan subrutin untuk mencetak alamat pos, dan sebagainya.
Dalam modul tersebut, datanya sering disembunyikan di dalam modul; program yang
menggunakan modul tersebut hanya dapat memanipulasi data tidak secara langsung, yakni
dengan memanggil subrutin yang disediakan modul. Hal ini melindungi data, sebab
data hanya dapat dimanipulasi dengan cara yang benar dan dikenal. Dan hal ini juga
memudahkan program untuk menggunakan modul, sebab program tidak perlu memikirkan
mengenai rincian bagaimana data disajikan. Informasi mengenai penyajian data disembunyikan.</p>

<p>Modul yang dapat mendukung penyembunyian data seperti ini menjadi hal yang umum
dalam bahasa pemrograman di awal tahun 1980an. Sejak saat itu, bentuk yang lebih
maju dari ide yang sama lebih kurang telah dipergunakan dalam rekayasa perangkat
lunak. Pendekatan terbaru ini disebut <newword>pemrograman berbasis objek</newword>,
yang sering disingkat sebagai OOP (singkatan ini berasal dari bahasa inggris 
<newword>Object-Oriented Programming</newword> yang lebih sering dipakai 
daripada versi bahasa indonesianya yakni pemrograman berbasis objek).</p>

<p>Konsep utama dari pemrograman berbasis objek adalah <newword>objek</newword>,
yang merupakan sejenis modul yang mengandung data data dan subrutin. Dari
sudut pandang OOP, objek merupakan sejenis perwujudan mandiri yang memiliki
<newword>keadaan</newword> internal (data yang dikandungnya) dan dapat menanggapi
<newword>pesan</newword> (panggilan terhadap subrutinnya). Sebagai contoh, objek
dari daftar alamat pos memiliki keadaan yang mencakup daftar nama dan alamat. Jika
kamu mengirim pesan yang memerintahkan penambahan nama, ia akan menanggapi dengan
memodifikasi keadaannya sesuai dengan perubahan yang terjadi. Jika kamu memberi
pesan yang memerintahkannya untuk mencetak dirinya, maka ia akan menanggapi dengan
mencetak daftar dari nama dan alamat yang ada padanya.</p>

<p>Pendekatan OOP dalam rekayasa perangkat lunak dimulai dengan mengenali objek
yang berkaitan dengan masalah dan pesan yang akan direspon oleh objek tersebut.
Program yang dihasilkan merupakan kumpulan dari objek yang memiliki data dan
tanggung jawabnya masing-masing. Objek berinteraksi dengan mengirim pesan satu
sama lain. Tidak cukup banyak pendekatan "top-down" dalam perancangan skala
besar dari program seperti ini, dan orang-orang yang terbiasa dengan program
tradisional akan mendapatkan sedikit kesulitan untuk menjadi terbiasa dengan
OOP. Disamping itu, orang-orang yang menggunakan OOP akan menyatakan bahwa
pemrograman berbasis objek lebih baik dalam memodelkan bagaimana hal bekerja
di dunia ini, sehingga pemrograman ini lebih mudah ditulis, lebih mudah
dipahami, dan juga lebih tepat.</p>

<break/>

<p>Kamu harus menganggap objek "mengetahui" bagaimana menanggapi pesan tertentu.
Objek yang berbeda mungkin akan menanggapi pesan yang sama dengan cara yang 
berbeda. Sebagai contoh, pesan "cetak" akan memberikan hasil yang berbeda tergantung
oleh objek yang mana yang dikirim pesan. Sifat objek ini&mdash;dimana objek yang
berbeda dapat menanggapi pesan yang sama dengan cara yang berbeda&mdash;disebut
sebagai <newword>polimorfisme</newword>.</p>

<p>Merupakan hal yang lumrah jika objek-objek memiliki semacam "kemiripan" antara
satu dengan yang lainnya. Objek yang mengandung tipe data yang sama dan menanggapi
pesan yang sama dengan cara yang sama berada dalam <newword>kelas</newword> yang sama.
(Dalam pemrograman yang sebenarnya, kelas bersifat primer yakni kelas dibuat kemudian
satu atau lebih objek dibuat menggunakan kelas tersebut sebagai templatenya.) Tetapi
objek juga bisa sama tanpa perlu berada di dalam kelas yang sama.</p>

<p>Sebagai contoh, bayangkan sebuah program menggambar yang dapat digunakan untuk
menggambar garis, persegi, oval, poligon, dan kurva di layar. Pada program tersebut,
setiap objek yang tampak di layar dapat diwakilkan oleh objek perangkat lunak di program.
akan ada lima kelas objek di program, masing-masing untuk tiap jenis objek tampak
yang dapat digambar. Semua garis akan termasuk satu kelas, semua persegi termasuk ke
dalam kelas yang lain, dan begitu seterusnya. Kelas-kelas ini jelas saling berkaitan;
kesemuanya mewakili "objek yang dapat digambar". Mereka juga, sebagai contoh, mungkin
dapat menanggapi pesan "gambar dirimu sendiri". Tingkat lain dari pengelompokkan, yang
didasarkan pada data yang diperlukan untuk mewakili tiap jenis objek, yang kurang
jelas, tetapi mungkin sangat berguna di program: Kita dapat mengelompokkan poligon
dan kurva dalam satu kelompok sebagai "objek banyak titik," sementara garis, persegi,
dan oval sebagai "objek dua titik." (Garis ditentukan oleh dua titik awal dan akhirnya,
persegi ditentukan oleh sudutnya, dan oval ditentukan oleh dua sudut dari persegi
yang mencakupnya. Persegi yang saya maksud di sini memiliki sisi vertikal dan horizontal,
sehingga ia dapat ditentukan oleh dua titiknya; ini merupakan arti umum dari "persegi"
dalam program menggambar.)
Kita dapat membuat diagram dari hubungan tersebut sebagai berikut:</p>

<img height="222" width="526" src="overview-fig4.png" tex="overview-fig4.eps" 
      texscale="0.8" alt="Contoh hirarki kelas." bordered="true"/>

<p>DapatDigambarObjek, BanyakTitikObjek, dan DuaTitikObjek merupakan kelas-kelas
di program. BanyakTitikObjek dan DuaTitikObjek akan menjadi <newword>subkelas</newword>
dari DapatDigambarObjek. Kelas Garis merupakan subkelas dari DuaTitikObjek dan (secara
tidak langsung) DapatDigambarObjek. Subkelas dari kelas disebut <newword>mewarisi</newword>
sifat-sifat dari kelas tersebut. Subkelas dapat menamba warisannya dan dapat juga "menimpa"
(atau override) bagian dari pewarisan tersebut (dengan mendefinisikan tanggapan berbeda
untu metode tertentu). Oleh karena itu, garis, persegi, dan yang lainnya <b>merupakan</b>
objek yang dapat digambar, dan kelas DapatDigambarObjek menunjukkan hubungan tersebut.</p>

<p>Pewarisan merupakan cara yang sangat bermanfaat untuk mengatur program. Hal ini juga
berhubungan dengan masalah penggunaan kembali komponen perangkat lunak. Kelas merupakan
komponen pokok dari penggunaan kembali perangkat lunak. Tidak hanya ia dapat digunakan
secara langsung jika tepat cocok dengan program yang sedang kamu buat, bahkan jika ia
hampir cocok kamu tetap dapat menggunakannya kembali dengan mendefinisikan sebuah subkelas
dan melakukan perubahan kecil yang diperlukan untuk mengadaptasikannya sesuai dengan keperluanmu.</p>

<p>Karena itu, OOP dimaksudkan untuk menjadi alat yang unggul untuk pengembangan
program dan merupakan solusi parsial untuk masalah penggunaan kembali di perangkat
lunak. Objek, kelas, dan pemrograman berbasis objek akan menjadi teman penting di
keseluruhan teks buku ini. Kamu akan mulai menggunakan objek bawaan yang dimiliki
oleh bahasa Java pada <localref href="basics">halaman selanjutnya</localref> dan
di <localref href="OOP"/> kamu akan memulai membuat kelas dan objekmu sendiri.</p>

</section>
