<?xml version="1.0" encoding="UTF-8"?>


<section id="overview.6" title="The Modern User Interface">

<p><start><bigK</big>etika komputer pertama kali diperkenalkan</start>, orang-orang
biasa&mdash;termasuk kebanyakan programmer&mdash;tidak dapat mendekatinya. Komputer ini
diletakkan di ruangan tertutup dimana petugas berpakaian putih menjaga akan menerima
program dan datamu, memasukkannya ke komputer, dan memberikan hasil 
and data, feed them to the computer, dan memberikan kamu kembali hasil dari respon
komputer beberapa waktu kemudian. Ketika timesharing&mdash;dimana komputer membagi 
perhatiannya secara cepat dari satu orang ke orang lainnya&mdash;ditemukan pada tahun 
1960an, beberapa orang dimungkinkan untuk berinteraksi secara langsung dengan komputer
pada saat yang bersamaan. Pada sistem timesharing, pengguna duduk di "terminal" dimana
mereka mengetikkan perintah ke komputer, dan komputer menampilkan kembali ketikan 
responsnya. Komputer personal awal juga memakai perintah dan respon ketikan, hanya saja
cuma satu orang yang bekerja pada satu waktu. Jenis interaksi antar pengguna dan komputer
ini disebut <newword>antarmuka command-line</newword>.</p>

<p>Tentu saja sekarang ini kebanyakan orang berinteraksi dengan komputer dalam cara yang
sangat berbeda. Mereka menggunakan <newword>Antarmuka Pengguna Grafis</newword> (dalam
pemrograman lebih dikenal dengan sebutan <newword>Graphical User Interface</newword>), 
atau GUI. Komputer menampilkan <newword>komponen</newword> antarmuka pada layar. Komponen-komponen
in mencakup window, scroll bar, menu, tombol, dan ikon. Biasanya, sebuah <newword>mouse</newword> digunakan
untuk berinteraksi dengan komponen-komponen tersebut atau menggunakan jarimu pada "layar sentuh".
Dengan menganggap kamu bukan baru-baru saja teleportasi dari tahun 1970an, kamu dipastikan
sudah kenal dengan dasar dari GUI!</p>

<p>Banyak komponen antarmuka GUI yang telah menjadi standar. Dimana mereka memiliki
tampilan dan sifat yang sama di platform komputer yang berbeda, termasuk
Mac&nbsp;OS, Windows, dan Linux. Program Java,
yang seharusnya berjalan pada berbagai platform tanpa mengubah programnya, dapat
menggunakan semua komponen standar GUI. Mereka mungkin terlihat berbeda di tiap
platform, tetapi fungsionalitasnya akan sama pada tiap komputer dimana program
tersebut berjalan.</p>

<p>Di bawah ini merupakan tampilan sebuah program Java sederhana yang menunjukkan 
beberapa komponen antarmuka standar dari GUI. Saat program berjalan, sebuah
window yang serupa dengan gambar yang ditunjukkan di sini akan terbuka di
layar komputer. Ada empat komponen yang ada pada window yang dapat berinteraksi
dengan pengguna: sebuah tombol, checkbox, kolom teks, dan menu pop-up. Komponen-
komponen tersebut diberi label. Ada beberapa komponen lainnya di window.
Label-label pun termasuk dalam komponen GUI (meskipun kamu tidak dapat berinteraksi
dengannya). Bagian sebelah kanan dari window merupakan komponen teks area yang
dapat menampilkan banyak baris teks. Sebuah komponen scrollbar muncul 
di sepanjang bagian teks area saat jumlah baris teks lebih banyak dari
jumlah baris yang muat di teks area. Dan pada kenyataannya, dalam terminologi
Java, window keseluruhan itu sendiri disebut sebagai "komponen."</p>

<img src="overview-GUIDemo.png" tex="overview-GUIDemo.eps" height="180" width="577" 
    alt="Screenshot dari GUIDemo yang menampilkan beberapa komponen dasar GUI"
    texscale="0.5"/>
    
<np>(Jika kamu ingin menjalankan program ini, kode sumber, <sourceref href="GUIDemo.java"/>,
juga program terkompilasinya, <jarref href="GUIDemo.jar"/>, tersedia secara on line.  Untuk informasi lebih lanjut dalam
penggunaannya dan contoh lain dari buku teks ini, dapat dilihat di <localref href="basics.6"/>.)</np>

<p>Saat ini Java memiliki dua set lengkap dari komponen GUI. Salah satunya
AWT atau <newword>Abstract Windowing Toolkit</newword>, tersedia di
versi asli Java. Yang kedua, yang dikenal sebagai
<newword>Swing</newword>, diperkenalkan di Java versi 1.2,
digunakan lebih sering daripada AWT di kebanyakan program Java modern.  Program
yang ditunjukkan di atas menggunakan komponen Swing.
</p>

<p>Saat pengguna berinteraksi dengan komponen GUI, "event" akan dihasilkan.  Sebagai contoh,
mengklik tombol akan menghasilkan sebuah event, dan menekan tombol keyboard "return" saat
mengetik pada kolom teks akan menghasilkan event.
Setiap saat sebuah
event dihasilkan, sebuah pesan akan dikirimkan ke program yang memberitahukan bahwa sebuah
event telah terjadi, dan program akan menanggapi sesuai dengan programnya sendiri. Dalam kenyataannya,
program GUI umumnya sebagian besar mencakup "penangan event" (event handler) yang
memberitahukan program bagaimana menanggapi berbagai macam event. Pada contoh ini,
program telah diprogram untuk menanggapi masing-masing event dengan menampilkan sebuah
pesan ke teks area. Pada contoh yang lebih realistis, event handler akan melakukan
banyak hal lainnya.</p>

<p>Penggunaan istilah "pesan" di sini adalah disengaja. Pesan-pesan, seperti yang kamu lihat
di <localref href="overview.5">bagian&nbsp;sebelumnya</localref>, dikirimkan ke objek. 
Dan sebenarnya, komponen GUI Java diimplementasikan sebagai objek. Java mencakup
banyak kelas-kelas yang telah ditetapkan sebelumnya yang mewakili bermacam-macam
komponen GUI. Beberapa dari kelas ini merupakan subkelas dari kelas lainnya. Di bawah
ini merupakan diagram yang menampilkan beberapa kelas GUI Swing dan hubungannya:</p>

<img width="557" height="277" src="overview-fig5.png" tex="overview-fig5.eps" texscale="0.7" bordered="true"/>

<p>Jangan kuatir tentang rinciannya saat ini, tetapi cobalah mendapatkan
nuansa bagaimana pemrograman berorientasi objek dan pewarisan digunakan disini.
Sebagai catatan, semua kelas GUI merupakan subkelas, baik secara langsung maupun
tidak langsung, dari kelas yang disebut <classname>JComponent</classname>, yang
mewakili sifat-sifat umum yang dimiliki oleh semua komponen Swing. Di diagram,
dua dari subkelas langsung dari <classname>JComponent</classname>
memiliki subkelas. Kelas <classname>JTextArea</classname> dan
<classname>JTextField</classname>, yang memiliki perilaku tertentu yang sama, dikelompokkan
bersama sebagai subkelas dari <classname>JTextComponent</classname>.
Sama halnya pada <classname>JButton</classname> dan <classname>JToggleButton</classname>
merupakan subkelas dari <classname>JAbstractButton</classname>, yang mewakili
sifat umum dari tombol dan checkbox.  (Ngomong-ngomong, <classname>JComboBox</classname>
merupakan kelas Swing yang mewakili menu pop-up.)
</p>

<p>Dari diskusi singkat ini, mungkin kamu dapat melihat bagaimana pemrograman GUI
membuat penggunaan rancangan berorientasi objek menjadi efektif. Dalam kenyataannya,
GUI, dengan "objek tampaknya", merupakan faktor utama yang berkontribusi dalam
popularitas OOP.</p>

<p>pemrograman dengan komponen GUI dan event merupakan salah satu aspek yang
paling menarik di Java. Tetapi kita akan menghabiskan beberapa bab membahas
tentang dasar-dasar sebelum kembali ke topik ini pada <localref href="GUI1"/>.</p>
    
</section>