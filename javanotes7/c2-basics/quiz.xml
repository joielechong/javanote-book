<?xml version="1.0" encoding="UTF-8"?>


<quiz>

<question><ques><p>Briefly explain what is
meant by the <i>syntax</i> and the <i>semantics</i> of a programming language.
Give an example to illustrate the difference between a syntax error and a
semantics error.</p></ques>

<ans><p>The syntax of a language is its
grammar, and the semantics is its meaning. A program with a syntax error cannot
be compiled. A program with a semantic error can be compiled and run, but gives
an incorrect result. A missing semicolon in a program is an example of a syntax
error, because the compiler will find the error and report it. If <code>N</code> is
an integer variable, then the statement "<code>frac = 1/N;</code>" is probably an
error of semantics. The value of <code>1/N</code> will be 0 for any <code>N</code>
greater than 1. It's likely that the programmer meant to say
<code>1.0/N</code>.</p></ans></question>



<question><ques><p>What does the computer do
when it executes a variable declaration statement. Give an example.</p></ques>

<ans><p>A variable is a "box", or
location, in the computer's memory that has a name. The box holds a value of
some specified type. A variable declaration statement is a statement such
as</p>

<pre>int x;</pre>

<np>which creates the variable x. When the computer executes a variable
declaration, it creates the box in memory and associates a name (in this case,
x) with that box. Later in the program, that variable can be referred to by
name.</np>
</ans></question>



<question><ques><p>What is a <i>type,</i> as
this term relates to programming?</p></ques>

<ans><p>A "type" represents a set of
possible values. When you specify that a variable has a certain type, you are
saying what values it can hold. When you say that an expression is of a certain
type, you are saying what values the expression can have. For example, to say
that a variable is of type <ptype>int</ptype> says that integer values in a certain
range can be stored in that variable.</p></ans></question>



<question><ques><p>One of the primitive types
in Java is <i>boolean.</i> What is the <ptype>boolean</ptype> type? Where are boolean
values used? What are its possible values?</p></ques>

<ans><p>The only values of type boolean
are <code>true</code> and <code>false</code>. Expressions of type boolean are used in
places where true/false values are expected, such as the conditions in
<code>while</code> loops and <code>if</code> statements.</p></ans></question>


<question><ques><p>Give the meaning of each of
the following Java operators:</p>

<pre>a)    ++

b)    &amp;&amp;

c)    !=</pre>
</ques>
   <ans><p>The operator ++ is used to add 1
to the value of a variable. For example, "<code>count++</code>" has the same effect
as "<code>count = count + 1</code>".</p>
<p>The operator &amp;&amp; represents the word <b>and</b>. It can be used to
combine two boolean values, as in "<code>(x&nbsp;&gt;&nbsp;0&nbsp;&amp;&amp;&nbsp;y&nbsp;&gt;&nbsp;0)</code>",
which means, "x is greater than 0 <b>and</b> y is greater than 0."</p>
<p>The operation != means "is not equal to", as in "<code>if (x != 0)</code>",
meaning "if x is not equal to zero.".</p></ans></question>


<question><ques><p>Explain what is meant by an
<i>assignment statement,</i> and give an example. What are assignment
statements used for?</p></ques>

<ans><p>An assignment statement computes
a value and stores that value in a variable. Examples include:</p>

<pre>x = 17;          // Assign a constant value to the variable, x.
newRow = row;    // Copy the value from the variable, row,
                 //             into the variable, newRow.
ans = 17*x + 42; // Compute the value of the expression 
                 //     17*x + 42, and store that value in ans.</pre>

<np>An assignment statement is used to change the value of a variable as the
program is running. Since the value assigned to the variable can be another
variable or an expression, assignments statements can be used to copy data from
one place to another in the computer, and to do complex computations.</np>
</ans></question>


<question><ques><p>What is meant by
<i>precedence</i> of operators?</p></ques>

<ans><p>If two or more operators are
used in an expression, and if there are no parentheses to indicate the order in
which the operators are to be evaluated, then the computer needs some way of
deciding which operator to evaluate first. The order is determined by the
precedence of the operators. For example, <code>*</code> has higher precedence than
<code>+</code>, so the expression <code>3+5*7</code> is evaluated as if it were written
<code>3+(5*7)</code>.</p></ans></question>



<question><ques><p>What is a
<i>literal</i>?</p></ques>

<ans><p>A literal is a sequence of
characters used in a program to represent a constant value. For example,
<code>'A'</code> is a literal that represents the value A, of type <ptype>char</ptype>,
and <code>17L</code> is a literal that represents the number 17 as a value of type
<ptype>long</ptype>. A literal is a way of writing a value, and should not be
confused with the value itself.</p></ans></question>



<question><ques><p>In Java, classes have two
fundamentally different purposes. What are they?</p></ques>

<ans><p>A class can be used to group
together variables and subroutines that are contained in the class. These are
called the static members of the class. For example, the subroutine
<code>Math.sqrt</code> is a static member of the class called <classname>Math</classname>. Also,
the <code>main</code> routine in any program is a static member of a class. The
second possible purpose of a class is to describe and create objects. The class
specifies what variables and subroutines are contained in those objects. In
this role, classes are used in object-oriented programming (which we haven't
studied yet in any detail.)</p></ans></question>



<question><ques><p>What is the difference
between the statement "<code>x&nbsp;=&nbsp;TextIO.getDouble();</code>" and the statement
"<code>x&nbsp;=&nbsp;TextIO.getlnDouble();</code>"</p></ques>

<ans><p>Either statement will read a
real number input by the user, and store that number in the variable, x. They
would both read and return exactly the same value. The difference is that in
the second statement (using <code>getlnDouble</code>), after reading the value the
computer will continue reading characters from input up to and including the
next carriage return. These extra characters are discarded.</p></ans></question>
   
   
<question>
   <ques><p>Explain why the value of the expression <code>2&nbsp;+&nbsp;3&nbsp;+&nbsp;"test"</code>
      is the string <code>"5test"</code> while the value of the expression
      <code>"test"&nbsp;+&nbsp;2&nbsp;+&nbsp;3</code> is the string <code>"test23"</code>.
      What is the value of <code>"test"&nbsp;+&nbsp;2&nbsp;*&nbsp;3</code>&nbsp;?</p>
   </ques>
   <ans><p>The reason is somewhat technical.
      The difference is due to the  order of evaluation.  When
      several <code>+</code> operators are used in a row, with no parentheses, they
      are evaluated from left to right.
      <code>2&nbsp;+&nbsp;3&nbsp;+&nbsp;"test"</code> is interpreted as
      <code>(2&nbsp;+&nbsp;3)&nbsp;+&nbsp;"test"</code>, so 2 and 3 are
      added together, giving 5, and then the 5 is concatenated onto the string <code>"test"</code>.
      On the other hand,  <code>"test"&nbsp;+&nbsp;2&nbsp;+&nbsp;3</code> is interpreted as
      <code>("test"&nbsp;+&nbsp;2)&nbsp;+&nbsp;3</code>, so the 2 is first concatenated onto
      the <code>"test"</code>, giving <code>"test2"</code>, and then the 3 is concatenated
      onto that.  In the case of <code>"test"&nbsp;+&nbsp;2&nbsp;*&nbsp;3</code>, the precedence
      rules for <code>+</code> and <code>*</code> come into play.  Since <code>*</code>
      has higher precedence, this expression is interpreted as
      <code>"test"&nbsp;+&nbsp;(2&nbsp;*&nbsp;3)</code>, which evaluates to <code>"test6"</code>.</p>
   </ans>
</question>

<question>
   <ques><p>Integrated Development Environments such as Eclipse often use <newword>syntax coloring</newword>,
      which assigns various colors to the characters in a program to reflect the syntax of the language.
      A student notices that Eclipse colors the word <classname>String</classname> differently from 
      <ptype>int</ptype>, <ptype>double</ptype>, and <ptype>boolean</ptype>.  The student asks why
      <classname>String</classname> should be a different color, since all these words are names of types.
      What's the answer to the student's question?
   </p></ques>
   <ans><p>(This was a real question from a real student.)</p>
      <p>Although <classname>String</classname>, like <ptype>int</ptype>, <ptype>double</ptype>, and <ptype>boolean</ptype>, is a type name,
      there is a fundamental difference between <classname>String</classname> and the other types.  <classname>String</classname>
      is the name of a <b>class</b>, while <ptype>int</ptype>, <ptype>double</ptype>, and <ptype>boolean</ptype> are
      primitive types.  Eclipse colors all class names in the same way that it does <classname>String</classname>,
      and it uses a different color for the primitive types.  (Although the difference between classes and
      primitive types might not seem very important to you now, it really is an important distinction
      and it's reasonable for Eclipse to use different colors for the two concepts.)</p>
   </ans>
</question>

</quiz>