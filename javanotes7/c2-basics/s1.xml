<?xml version="1.0" encoding="UTF-8"?>


<section id="basics.1" title="The Basic Java Application">

<p><start><big>A</big> program is a sequence</start> of instructions that a
computer can execute to perform some task. A simple enough idea, but for the
computer to make any use of the instructions, they must be written in a form
that the computer can use. This means that programs have to be written in
<newword>programming languages</newword>. Programming languages
differ from ordinary human languages in being completely unambiguous and very
strict about what is and is not allowed in a program. The rules that determine
what is allowed are called the <newword>syntax</newword> of the
language. Syntax rules specify the basic vocabulary of the language and how
programs can be constructed using things like loops, branches, and subroutines.
A syntactically correct program is one that can be successfully compiled or
interpreted; programs that have syntax errors will be rejected (hopefully with
a useful error message that will help you fix the problem).</p>

<p>So, to be a successful programmer, you have to develop a detailed knowledge
of the syntax of the programming language that you are using. However, syntax
is only part of the story. It's not enough to write a program that will
run&mdash;you want a program that will run and produce the correct result! That is, the
<b>meaning</b> of the program has to be right. The meaning of a
program is referred to as its <newword>semantics</newword>.  More correctly, the semantics
of a programming language is the set of rules that determine the meaning of a
program written in that language.
A&nbsp;semantically correct program is one that does what you want it to.</p>
   
<p>Furthermore, a program can be syntactically and semantically correct but
still be a pretty bad program.  Using the language correctly is not the
same as using it <b>well</b>.  For example, a good program has "style."  It is written
in a way that will make it easy for people to read and to understand.
It follows conventions that will be familiar to other programmers.
And it has an overall design that will make sense to human readers.
The computer is completely oblivious to such things, but to a human
reader, they are paramount.  These aspects of programming are sometimes
referred to as <newword>pragmatics</newword>. (I&nbsp;will often use
the more common term <newword>style</newword>.)
</p>

<p>When I introduce a new language feature, I will explain
the syntax, the semantics, and some of the pragmatics of that feature. You should memorize the syntax;
that's the easy part. Then you should get a feeling for the semantics by
following the examples given, making sure that you understand how they work,
and, ideally, writing short programs of your own to test your understanding.
And you should try to appreciate and absorb the pragmatics&mdash;this means learning
how to use the language feature <i>well</i>, with style that will earn
you the admiration of other programmers.
</p>

<p>Of course, even when you've become familiar with all the individual features
of the language, that doesn't make you a programmer. You still have to learn
how to construct complex programs to solve particular problems. For that,
you'll need both experience and taste. You'll find hints about software
development throughout this textbook.</p>

<break/>

<p>We begin our exploration of Java with the problem that has become
traditional for such beginnings: to write a program that displays the message
"Hello World!". This might seem like a trivial problem, but getting a computer
to do this is really a big first step in learning a new programming language
(especially if it's your first programming language). It means that you
understand the basic process of:</p>

<ol>
<li>getting the program text into the computer,</li>
<li>compiling the program, and</li>
<li>running the compiled program.</li>
</ol>

<p>The first time through, each of these steps will probably take you a few
tries to get right. I won't go into the details here of how you do each of
these steps; it depends on the particular computer and Java programming
environment that you are using.   See <localref href="basics.6"/>
for information about creating and running Java programs in specific programming
environments.  But in general,
you will type the program using some sort of text editor and save the program
in a file. Then, you will use some command to try to compile the file. You'll
either get a message that the program contains syntax errors, or you'll get a
compiled version of the program. In the case of Java, the program is compiled
into Java bytecode, not into machine language. Finally, you can run the
compiled program by giving some appropriate command. For Java, you will
actually use an interpreter to execute the Java bytecode. Your programming
environment might automate some of the steps for you&mdash;for example, the
compilation step is often done automatically&mdash;but you can be sure that
the same three steps are being done in the background.</p>

<p>Here is a Java program to display the message "Hello World!". Don't expect
to understand what's going on here just yet; some of it you won't really
understand until a few chapters from now:</p>

<pre>/** A program to display the message
 *  "Hello World!" on standard output.
 */
public class HelloWorld {
 
   public static void main(String[] args) {
      System.out.println("Hello World!");
   }
      
}   // end of class HelloWorld</pre>

<np>The command that actually displays the message is:</np>

<pre>System.out.println("Hello World!");</pre>

<np>This command is an example of a <newword>subroutine call statement</newword>. 
It uses a "built-in subroutine" named
<code>System.out.println</code> to do the actual work. Recall that a subroutine
consists of the instructions for performing some task, chunked together and
given a name. That name can be used to "call" the subroutine whenever that task
needs to be performed. A <newword>built-in subroutine</newword> is
one that is already defined as part of the language and therefore automatically
available for use in any program.</np>

<p>When you run this program, the message "Hello World!" (without the quotes)
will be displayed on standard output. Unfortunately, I can't say exactly what
that means! Java is meant to run on many different platforms, and standard
output will mean different things on different platforms. However, you can
expect the message to show up in some convenient or inconvenient place. (If you use a
command-line interface, like that in Oracle's Java Development Kit,
you type in a command to tell the computer to run the program. The computer
will type the output from the program, Hello&nbsp;World!, on the next line.
In an integrated development environment such as Eclipse, the output
might appear somewhere in one of the environment's windows.)</p>

<p>You must be curious about all the other stuff in the above program. Part of
it consists of <newword>comments</newword>. Comments in a program are
entirely ignored by the computer; they are there for human readers only. This
doesn't mean that they are unimportant. Programs are meant to be read by people
as well as by computers, and without comments, a program can be very difficult
to understand. Java has two types of comments. The first type
begins with <code>//</code> and extends to the end of a line. There
is a comment of this form on the last line of the above program.  The computer
ignores the <code>//</code> and everything that follows it on the same line. 
The second type of comment starts with <code>/*</code> and ends with <code>*/</code>,
and it can extend over more than one line.  The first three lines of the
program are an example of this second type of comment. (A&nbsp;comment that actually
begins with <code>/**</code>, like this one does,
has special meaning; it is a "Javadoc" comment that can be used
to produce documentation for the program.)</p>

<p>Everything else in the program is required by the rules of Java syntax. All
programming in Java is done inside "classes." The first line in the above
program (not counting the comment) says that this is a class named <classname>HelloWorld</classname>. "HelloWorld," the
name of the class, also serves as the name of the program. Not every class is a
program. In order to define a program, a class must include a subroutine named
<code>main</code>, with a definition that takes the form:</p>

<pre>public static void main(String[] args) {
      <bnf>statements</bnf>
}</pre>

<p>When you tell the Java interpreter to run the program, the interpreter calls
this <code>main()</code> subroutine, and the statements that it contains are
executed. These statements make up the script that tells the computer exactly
what to do when the program is executed. The <code>main()</code> routine can call other
subroutines that are defined in the same class or even in other classes, but it
is the <code>main()</code> routine that determines how and in what order the other
subroutines are used.</p>

<p>The word "public" in the first line of <code>main()</code> means that this
routine can be called from outside the program. This is essential because the
<code>main()</code> routine is called by the Java interpreter, which is something 
external to the program itself. The remainder of the
first line of the routine is harder to explain at the moment; for now, just
think of it as part of the required syntax. The definition of the subroutine&mdash;that
is, the instructions that say what it does&mdash;consists of the sequence of
"statements" enclosed between braces, <code>{</code> and&nbsp;<code>}</code>. Here, I've used <bnf>statements</bnf> 
as a placeholder for the actual statements that
make up the program. Throughout this textbook, I will always use a similar
format: anything that you see in <bnf>this style of text</bnf>
(<web>green and in boldface</web><tex>italic in angle brackets</tex>)
is a placeholder that describes something you need to
type when you write an actual program.</p>

<p>As noted above, a subroutine can't exist by itself. It has to be part of a
"class". A program is defined by a public class that takes the form:</p>

<pre>public class <bnf>program-name</bnf> {

    <bnf>optional-variable-declarations-and-subroutines</bnf>
    
    public static void main(String[] args) {
       <bnf>statements</bnf>
    }
    
    <bnf>optional-variable-declarations-and-subroutines</bnf>

}</pre>

<np>The name on the first line is the name of the program, as well as the name
of the class. (Remember, again, that <bnf>program-name</bnf> is a placeholder for the
actual name!)</np>

<p>If the name of the class is HelloWorld, then the class <b>must</b> be
saved in a file called <code>HelloWorld.java</code>. When this file is compiled,
another file named <code>HelloWorld.class</code> will be produced. This class file,
<code>HelloWorld.class</code>, contains the translation of the program into Java bytecode, 
which can be executed by a
Java interpreter. <code>HelloWorld.java</code> is called the <newword>source code</newword>
for the program. To execute the program, you only
need the compiled <code>class</code> file, not the source code.</p>

<p>The layout of the program on the page, such as the use of blank lines
and indentation, is not part of the syntax or semantics of the language.
The computer doesn't care about layout&mdash;you could run the entire program 
together on one line as far as it is concerned.  However, layout is important
to human readers, and there are certain style guidelines for layout that
are followed by most programmers.</p>
   
<p>Also note that according to the above syntax specification, a program can
contain other subroutines besides <code>main()</code>, as well as things called
"variable declarations." You'll learn more about these later, but not until
<localref href="subroutines"/>.</p>

</section>