<?xml version="1.0" encoding="UTF-8"?>


<section id="generics.3" title="Maps">

<p><start><big>A</big>n array of N elements</start> can be thought of as a way
of associating some item with each of the integers <code>0</code>, <code>1</code>,
&dots;,&nbsp;<code>N-1</code>. If <code>i</code> is one of these integers, it's possible
to <newword>get</newword> the item associated with <code>i</code>, and
it's possible to <newword>put</newword> a new item in the <code>i</code>-th
position. These "get" and "put" operations define what it means to be an
array.</p>

<p>A <newword>map</newword> is a kind of generalized array. Like an
array, a map is defined by "get" and "put" operations. But in a map, these
operations are defined not for integers <code>0</code>, <code>1</code>,
&dots;,&nbsp;<code>N-1</code>, but for arbitrary objects of some specified
type <classname>T</classname>.  Associated to these objects of type <classname>T</classname>
are objects of some possibly different type&nbsp;<classname>S</classname>.</p>
   
<p>In fact, some
programming languages use the term <newword>associative array</newword> 
instead of "map" and use the same notation for associative arrays
as for regular arrays. In those languages, for example, you might see the
notation <code>A["fred"]</code> used to indicate the item associated to the string
"fred" in an associative array&nbsp;<code>A</code>. Java does not use array notation for maps,
unfortunately, but the idea is the same: A map is like an array, but the indices for a map
are objects, not integers. In a map, an object that serves as an
"index" is called a <newword>key</newword>. The object that is
associated with a key is called a <newword>value</newword>. Note that
a key can have at most one associated value, but the same value can be
associated to several different keys.  A map can be considered to be
a set of "associations," where each association is a key/value pair.</p>
   
<subsection id="generics.3.1" title="The Map Interface">

<p>In Java, maps are defined by the interface <code>java.util.Map</code>, which
includes <code>put</code> and <code>get</code> methods as well as other general methods
for working with maps.  The map interface, <classname>Map&lt;K,V&gt;</classname>, is
parameterized by <b>two</b> types.  The first type parameter, <classname>K</classname>,
specifies the type of objects that are possible keys in the map; the second type parameter,
<classname>V</classname>, specifies the type of objects that are possible values in the
map.  For example, a map of type <classname>Map&lt;Date,JButton&gt;</classname>
would associate values of type <classname>JButton</classname> to keys of
type <classname>Date</classname>.  For a map of type
<classname>Map&lt;String,String&gt;</classname>, both the keys and the values
are of type <classname>String</classname>.</p>

<p>Suppose that <code>map</code> is a variable of type <classname>Map&lt;K,V&gt;</classname>
for some specific types <classname>K</classname> and <classname>V</classname>. Then
the following are some of the methods that are defined for <code>map</code>:</p>

<ul>
<li><codedef>map.get(key)</codedef> &mdash; returns the
object of type <classname>V</classname> that is associated by the map to the
<code>key</code>.
If the map does not associate any value with <code>key</code>, then
the return value is <code>null</code>. Note that it's also possible for the return
value to be <code>null</code> when the map explicitly associates the value
<code>null</code> with the key. Referring to "<code>map.get(key)</code>" is similar to
referring to "<code>A[key]</code>" for an array&nbsp;<code>A</code>. (But note that
there is nothing like an <classname>IndexOutOfBoundsException</classname> for maps.)</li>

<li><codedef>map.put(key,value)</codedef> &mdash; Associates the
specified <code>value</code> with the specified <code>key</code>, where <code>key</code>
must be of type <classname>K</classname> and <code>value</code> must be of
type <classname>V</classname>. If the map already associated some other
value with the key, then the new value replaces the old one. This is similar to
the command "<code>A[key]&nbsp;=&nbsp;value</code>" for an array.</li>

<li><codedef>map.putAll(map2)</codedef> &mdash; if <code>map2</code>
is another map of type <classname>Map&lt;K,V&gt;</classname>, 
this copies all the associations from <code>map2</code> into map.
</li>

<li><codedef>map.remove(key)</codedef> &mdash; if <code>map</code>
associates a value to the specified <code>key</code>, that association is removed
from the map.</li>

<li><codedef>map.containsKey(key)</codedef> &mdash; returns a
boolean value that is <code>true</code> if the map associates some value to the
specified <code>key</code>.</li>

<li><codedef>map.containsValue(value)</codedef> &mdash; returns a
boolean value that is <code>true</code> if the map associates the specified
<code>value</code> to some key.</li>

<li><codedef>map.size()</codedef> &mdash; returns an <ptype>int</ptype>
that gives the number of key/value associations in the map.</li>

<li><codedef>map.isEmpty()</codedef> &mdash; returns a boolean
value that is <code>true</code> if the map is empty, that is if it contains no
associations.</li>

<li><codedef>map.clear()</codedef> &mdash; removes all
associations from the map, leaving it empty.</li>
</ul>

<p>The <code>put</code> and <code>get</code> methods are certainly the most commonly
used of the methods in the <classname>Map</classname> interface. In many applications, these
are the only methods that are needed, and in such cases a map is really no more
difficult to use than a standard array.</p>

<p>Java includes two classes that implement the interface <classname>Map&lt;K,V&gt;</classname>:
<classname>TreeMap&lt;K,V&gt;</classname> and <classname>HashMap&lt;K,V&gt;</classname>. 
In a <classname>TreeMap</classname>, the key/value
associations are stored in a sorted tree, in which they are sorted according to
their <code>keys</code>. For this to work, it must be possible to compare the keys
to one another. This means either that the keys must implement the interface
<classname>Comparable&lt;K&gt;</classname>, or that a <classname>Comparator</classname> must be provided
for comparing keys. (The <classname>Comparator</classname> can be provided as a parameter to
the <classname>TreeMap</classname> constructor.)  Note that in a <classname>TreeMap</classname>,
as in a <classname>TreeSet</classname>, the <code>compareTo()</code> (or <code>compare()</code>) method is used
to decide whether two keys are to be considered the same.  This can have undesirable
consequences if the <code>compareTo()</code> method does not agree with the usual
notion of equality, and you should keep this in mind when using <classname>TreeMaps</classname>.</p>

<p>A <classname>HashMap</classname> does not store associations in any particular order, so
the keys that can be used in a <classname>HashMap</classname> do not have to be comparable.
However, the key class should have reasonable definitions for the <code>equals()</code> method
and for a <code>hashCode()</code> method that is discussed later in this section; most of Java's
standard classes define these methods correctly.
Most operations are a little faster on <classname>HashMaps</classname> than they are on
<classname>TreeMaps</classname>. In general, you should use a <classname>HashMap</classname> unless you
have some particular need for the ordering property of a <classname>TreeMap</classname>. In
particular, if you are only using the <code>put</code> and <code>get</code> operations,
you can safely use a <classname>HashMap</classname>.</p>

<p>Let's consider an example where maps would be useful. In <localref href="arrays.4.2"/>, I
presented a simple <classname>PhoneDirectory</classname> class that associated phone numbers
with names. That class defined operations <code>addEntry(name,number)</code> and
<code>getNumber(name)</code>, where both <code>name</code> and <code>number</code> are
given as <classname>Strings</classname>. In fact, the phone directory is acting just like a
map, with the <code>addEntry</code> method playing the role of the <code>put</code>
operation and <code>getNumber</code> playing the role of <code>get</code>. In a real
programming application, there would be no need to define a new class; we could
simply use a map of type <classname>Map&lt;String,String&gt;</classname>. A directory
would be defined as</p>
   
<pre>Map&lt;String,String&gt; directory = new Map&lt;String,String&gt;();</pre>
   
<np>and then <code>directory.put(name,number)</code> would record a phone number
in the directory and <code>directory.get(name)</code> would retrieve the phone number
associated with a given name.</np>

</subsection>
   
<subsection id="generics.3.2" title="Views, SubSets, and SubMaps">

<p>A <classname>Map</classname> is not a <classname>Collection</classname>, and maps do not implement all
the operations defined on collections. In particular, there are no iterators
for maps. Sometimes, though, it's useful to be able to iterate through all the
associations in a map. Java makes this possible in a roundabout but clever
way. If <code>map</code> is a variable of type <classname>Map&lt;K,V&gt;</classname>, then the method</p>

<pre>map.keySet()</pre>

<np>returns the set of all objects that occur as keys for associations in the
map. The value returned by this method is an object that implements the interface 
<classname>Set&lt;K&gt;</classname>. The elements of this set are the map's keys. The obvious way to
implement the <code>keySet()</code> method would be to create a new set object, add
all the keys from the map, and return that set. But that's not how it's done.
The value returned by <code>map.keySet()</code> is not an independent object. It is
what is called a <newword>view</newword> of the actual objects that are stored
in the map. This "view" of the map implements the <classname>Set&lt;K&gt;</classname> interface, but
it does it in such a way that the methods defined in the interface refer
directly to keys in the map. For example, if you remove a key from the view,
that key&mdash;along with its associated value&mdash;is actually removed from the
map. It's not legal to add an object to the view, since it doesn't make sense
to add a key to a map without specifying the value that should be associated to
the key. Since <code>map.keySet()</code> does not create a new set, it's very
efficient, even for very large maps.</np>

<p>One of the things that you can do with a <classname>Set</classname> is get an
<classname>Iterator</classname> for it and use the iterator to visit each of the elements of
the set in turn. We can use an iterator for the key set of a map to traverse
the map. For example, if <code>map</code> is of type <classname>Map&lt;String,Double&gt;</classname>,
we could write:</p>

<pre>Set&lt;String&gt; keys = map.keySet();     // The set of keys in the map.
Iterator&lt;String&gt; keyIter = keys.iterator();
System.out.println("The map contains the following associations:");
while (keyIter.hasNext()) {
   String key = keyIter.next();  // Get the next key.
   Double value = map.get(key);  // Get the value for that key.
   System.out.println( "   (" + key + "," + value + ")" );
}</pre>
   
<np>Or we could do the same thing more easily, avoiding the explicit use of an iterator,
with a for-each loop:</np>

<pre>System.out.println("The map contains the following associations:");
for ( String key : map.keySet() ) {  // "for each key in the map's key set"
    Double value = map.get(key);
    System.out.println( "   (" + key + "," + value + ")" );
}</pre>
   
   
<p>If the map is a <classname>TreeMap</classname>, then the key set of the map is a sorted
set, and the iterator will visit the keys in ascending order.  For a <classname>HashMap</classname>,
the keys are visited in an arbitrary, unpredictable order.</p>

<p>The <classname>Map</classname> interface defines two other views. If <code>map</code> is a
variable of type <classname>Map&lt;K,V&gt;</classname>, then the method:</p>

<pre>map.values()</pre>

<np>returns an object of type <classname>Collection&lt;V&gt;</classname>
that contains all the values from the
associations that are stored in the map. The return value is a
<classname>Collection</classname> rather than a <classname>Set</classname> because it can contain duplicate
elements (since a map can associate the same value to any number of keys). The
method:</np>

<pre>map.entrySet()</pre>

<np>returns a set that contains all the associations from the map.  The
elements in the set are objects of type <classname>Map.Entry&lt;K,V&gt;</classname>.
<classname>Map.Entry&lt;K,V&gt;</classname> is defined as a static nested interface
inside the interface <classname>Map&lt;K,V&gt;</classname>, so
its full name contains a period. However, the name can be used in the same way as
any other type name.  (The return type
of the method <code>map.entrySet()</code> is written as
<classname>Set&lt;Map.Entry&lt;K,V&gt;&gt;</classname>.  The type parameter
in this case is itself a parameterized type.  Although this might look
confusing, it's just Java's way of saying that the elements of the
set are of type <classname>Map.Entry&lt;K,V&gt;</classname>.)
The information in the set returned by <code>map.entrySet()</code>
is actually no different from the information in the
map itself, but the set provides a different view of this information, with
different operations. Each <code>Map.Entry</code>
object contains one key/value pair, and defines methods <code>getKey()</code> and
<code>getValue()</code> for retrieving the key and the value. There is also a
method, <code>setValue(value)</code>, for setting the value; calling this
method for a <code>Map.Entry</code> object will modify the map itself,
just as if the map's <code>put</code> method were called.
As an example, we can use the entry
set of a map to print all the key/value pairs in the map. This is more efficient than
using the key set to print the same information, as I did in the above example,
since we don't have to use the <code>get()</code> method to look up the value associated with each key.
Suppose again that <code>map</code> is of type <classname>Map&lt;String,Double&gt;</classname>.
Then we can write:</np>

<pre>Set&lt;Map.Entry&lt;String,Double&gt;&gt; entries = map.entrySet();
Iterator&lt;Map.Entry&lt;String,Double&gt;&gt; entryIter = entries.iterator();
System.out.println("The map contains the following associations:");
while (entryIter.hasNext()) {
   Map.Entry&lt;String,Double&gt; entry = entryIter.next();
   String key = entry.getKey();  // Get the key from the entry.
   Double value = entry.getValue();  // Get the value.
   System.out.println( "   (" + key + "," + value + ")" );
}</pre>
   
<np>or, using a for-each loop:</np>

<pre>System.out.println("The map contains the following associations:");
for ( Map.Entry&lt;String,Double&gt; entry : map.entrySet() ) {
   System.out.println( "   (" + entry.getKey() + "," + entry.getValue() + ")" );
}</pre>
   
<break/>
   
<p>Maps are not the only place in Java's generic programming framework where
views are used. For example, the interface <classname>List&lt;T&gt;</classname> defines a 
<newword>sublist</newword> as a view of a part of a list. If <code>list</code>
implements the interface <classname>List&lt;T&gt;</classname>, then
the method</p>

<pre>list.subList( fromIndex, toIndex )</pre>

<np>where <code>fromIndex</code> and <code>toIndex</code> are integers,
returns a view of the part of the list consisting of the list elements in
positions between <code>fromIndex</code> and <code>toIndex</code> (including
<code>fromIndex</code> but excluding <code>toIndex</code>). This view lets you operate
on the sublist using any of the operations defined for lists, but the sublist
is not an independent list. Changes made to the sublist are actually  made
to the original list.</np>

<p>Similarly, it is possible to obtain views that represent certain subsets of
a sorted set. If <code>set</code> is of type <classname>TreeSet&lt;T&gt;</classname>, then
<code>set.subSet(fromElement,toElement)</code> returns a <classname>Set&lt;T&gt;</classname> that contains
all the elements of <code>set</code> that are between <code>fromElement</code> and
<code>toElement</code> (including <code>fromElement</code> and excluding
<code>toElement</code>).  The parameters <code>fromElement</code> and <code>toElement</code>
must be objects of type&nbsp;<classname>T</classname>.
For example, if <code>words</code> is a set of type <classname>TreeSet&lt;String&gt;</classname> in
which all the elements are strings of lower case letters, then
<code>words.subSet("m","n")</code> contains all the elements of <code>words</code> that
begin with the letter&nbsp;'m'. This subset is a view of part of the original set.
That is, creating the subset does not involve copying elements. And changes
made to the subset, such as adding or removing elements, are actually made to
the original set. The view <code>set.headSet(toElement)</code> consists of all
elements from the set which are strictly less than <code>toElement</code>, and
<code>set.tailSet(fromElement)</code> is a view that contains all elements from the
set that are greater than or equal to <code>fromElement</code>.</p>

<p>The class <classname>TreeMap&lt;K,V&gt;</classname> defines three submap views. A submap is similar
to a subset. A submap is a <classname>Map</classname> that contains a subset of the keys from
the original <classname>Map</classname>, along with their associated values. If <code>map</code>
is a variable of type <classname>TreeMap&lt;K,V&gt;</classname>, and if <code>fromKey</code>
and <code>toKey</code> are of type&nbsp;<classname>T</classname>,
then <code>map.subMap(fromKey,toKey)</code>
returns a view that contains all key/value pairs from <code>map</code> whose keys
are between <code>fromKey</code> and <code>toKey</code> (including <code>fromKey</code> and
excluding <code>toKey</code>). There are also views <code>map.headMap(toKey)</code> and
<code>map.tailMap(fromKey)</code> which are defined analogously to <code>headSet</code>
and <code>tailSet</code>. Suppose,
for example, that <code>blackBook</code> is a map of type
<classname>TreeMap&lt;String,String&gt;</classname> in which the keys
are names and the values are phone numbers. We can print out all the entries
from <code>blackBook</code> where the name begins with "M" as follows:</p>

<pre>Map&lt;String,String&gt; ems = blackBook.subMap("M","N");
     // This submap contains entries for which the key is greater
     // than or equal to "M" and strictly less than "N".
     
if (ems.isEmpty()) {
   System.out.println("No entries beginning with M.");
}
else {
   System.out.println("Entries beginning with M:");
   for ( Map.Entry&lt;String,String&gt; entry : ems.entrySet() )
      System.out.println( "   " + entry.getKey() + ": " + entry.getValue() );
}</pre>

<p>Subsets and submaps are probably best thought of as generalized search
operations that make it possible to find all the items in a range of values,
rather than just to find a single value. Suppose, for example that a database
of scheduled events is stored in a map of type <classname>TreeMap&lt;Date,Event&gt;</classname> 
in which the keys are the
times of the events, and suppose you want a listing of all events that are
scheduled for some time on July 4, 2014. Just make a submap containing all keys
in the range from 12:00 AM, July 4, 2014 to 12:00 AM, July 5, 2014, and output
all the entries from that submap. This type of search, which is known as a
<newword>subrange query</newword> is quite common.</p>

</subsection>

<subsection id="generics.3.3" title="Hash Tables and Hash Codes">

<p><classname>HashSets</classname> and <classname>HashMaps</classname> are implemented using a data
structure known as a <newword>hash table</newword>. You don't need to
understand hash tables to use <classname>HashSets</classname> or <classname>HashMaps</classname>, but any
computer programmer should be familiar with hash tables and how they work.</p>

<p>Hash tables are an elegant solution to the search problem. A hash table,
like a <classname>HashMap</classname>, stores key/value pairs. Given a key, you have to
search the table for the corresponding key/value pair. When a hash table is
used to implement a set, there are no values, and the only question is
whether or not the key occurs in the set. You still have to search for the key
to check whether it is there or not.</p>

<p>In most search algorithms, in order to find the item you are interested in,
you have to look through a bunch of other items that don't interest you. To
find something in an unsorted list, you have to go though the items one-by-one
until you come to the one you are looking for. In a binary sort tree, you have
to start at the root and move down the tree until you find the item you want.
When you search for a key/value pair in a hash table, you can go directly to
the location that contains the item you want. You don't have to look through
any other items. (This is not quite true, but it's close.) The location of the
key/value pair is computed from the key: You just look at the key, and then you
go directly to the location where it is stored.</p>

<p>How can this work? If the keys were integers in the range 0 to 99, we could
store the key/value pairs in an array, <code>A</code>, of 100 elements. The
key/value pair with key <code>K</code> would be stored in <code>A[K]</code>. The key
takes us directly to the location of the key/value pair. The problem is that
there are usually far too many different possible keys for us to be able to use
an array with one location for each possible key. For example, if the key can
be any value of type <ptype>int</ptype>, then we would need an array with over four
billion locations&mdash;quite a waste of space if we are only going to store, say,
a few thousand items! If the key can be a string of any length, then the number
of possible keys is infinite, and using an array with one location for each
possible key is simply impossible.</p>

<p>Nevertheless, hash tables store their data in an array, and the array index
where a key is stored is based on the key. The index is not equal to the key,
but it is computed from the key. The array index for a key is called the
<newword>hash code</newword> for that key. A function that computes a
hash code, given a key, is called a <newword>hash function</newword>.
To find a key in a hash table, you just have to compute the hash code of the
key and go directly to the array location given by that hash code. If the hash
code is 17, look in array location number 17.</p>

<p>Now, since there are fewer array locations than there are possible keys,
it's possible that we might try to store two or more keys in the same array
location. This is called a <newword>collision</newword>. A collision
is not an error. We can't reject a key just because another key happened to
have the same hash code. A hash table must be able to handle collisions in some
reasonable way. In the type of hash table that is used in Java, each array
location actually holds a linked list of key/value pairs (possibly an empty
list). When two items have the same hash code, they are in the same linked
list. The structure of the hash table looks something like this:</p>

<img src="hash-table.png" width="366" height="324" alt="hash table"
   tex="hash-table.eps" texscale="0.6" />


<np>In this diagram, there are two items with hash code 0, no items with hash code
1, one item with hash code 2, and so on. In a properly designed hash table,
most of the linked lists are of length zero or one, and the average length of
the lists is less than one. Although the hash code of a key doesn't necessarily
take you directly to that key, there are probably no more than one or two other
items that you have to look through before finding the key you want. For this
to work properly, the number of items in the hash table should be somewhat less
than the number of locations in the array. In Java's implementation, whenever
the number of items exceeds 75% of the array size, the array is replaced by a
larger one and all the items in the old array are inserted into the new
one. (This is why adding one new item will sometimes cause the ordering of all
the items in the hash table to change completely.)</np>

<p>There is still the question of where hash codes come from.  Every object in
Java has a hash code.
The <classname>Object</classname> class defines the method <code>hashCode()</code>, which
returns a value of type <ptype>int</ptype>.  When an object, <code>obj</code>, is stored
in a hash table that has <code>N</code> locations, a hash code in the range
<code>0</code> to <code>N-1</code> is needed. This hash code is computed as
<code>Math.abs(obj.hashCode())&nbsp;%&nbsp;N</code>, the remainder when the absolute value of
<code>obj.hashCode()</code> is divided by <code>N</code>. (The <code>Math.abs</code> is
necessary because <code>obj.hashCode()</code> can be a negative integer, and we
need a non-negative number to use as an array index.)</p>

<p>For hashing to work properly, two objects that are equal according to the
<code>equals()</code> method must have the same hash code. In the <classname>Object</classname>
class, this condition is satisfied because
both <code>equals()</code> and <code>hashCode()</code> are based on the address
of the memory location where the object is stored. 
However, as noted in
<localref href="generics.1.6"/>, many classes redefine the <code>equals()</code>
method. If a class redefines the <code>equals()</code> method, and if objects of
that class will be used as keys in hash tables, then the class must also
redefine the <code>hashCode()</code> method. For example, in the <classname>String</classname>
class, the <code>equals()</code> method is redefined so that two objects of type
<classname>String</classname> are considered to be equal if they contain the same sequence of
characters. The <code>hashCode()</code> method is also redefined in the
<classname>String</classname> class, so that the hash code of a string is computed from the
characters in that string rather than from its location in memory. For Java's
standard classes, you can expect <code>equals()</code> and <code>hashCode()</code> to
be correctly defined. However, you might need to define these methods in
classes that you write yourself.</p>
   
<p>Writing a good hash function is something of an art.  In order to work well, the hash
function must spread the possible keys fairly evenly over the hash table.  Otherwise,
the items in a table can be concentrated in a subset of the available locations, and the
linked lists at those locations can grow to large size; that would destroy the efficiency
that is the major reason for hash tables to exist in the first place.  However, I won't
cover techniques for creating good hash functions in this book.</p>
   
</subsection>

</section>